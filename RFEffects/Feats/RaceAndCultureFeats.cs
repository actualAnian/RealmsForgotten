using System;
using System.Collections.Generic;
using System.Text;
using TaleWorlds.CampaignSystem.GameComponents;
using TaleWorlds.CampaignSystem.Party;
using TaleWorlds.CampaignSystem;
using TaleWorlds.Core;
using TaleWorlds.Localization;
using HarmonyLib;
using RealmsForgotten;
using TaleWorlds.CampaignSystem.MapEvents;
using TaleWorlds.Library;
using TaleWorlds.CampaignSystem.Settlements;
using RealmsForgotten.RFEffects;
using TaleWorlds.CampaignSystem.Roster;
using SandBox.GameComponents;
using TaleWorlds.MountAndBlade;
using TaleWorlds.MountAndBlade.GauntletUI.AutoGenerated1;
using FaceGen = TaleWorlds.Core.FaceGen;
using RealmsForgotten.CustomSkills;

namespace RealmsForgotten.RFEffects.Feats
{

    internal class XilanPartySpeedCalculatingModel : DefaultPartySpeedCalculatingModel
    {
        public override ExplainedNumber CalculateBaseSpeed(MobileParty party, bool includeDescriptions = false,
            int additionalTroopOnFootCount = 0, int additionalTroopOnHorseCount = 0)
        {
            ExplainedNumber baseValue = base.CalculateBaseSpeed(party, includeDescriptions, additionalTroopOnFootCount,
                additionalTroopOnHorseCount);
            if (party.Owner?.CharacterObject.Race == FaceGen.GetRaceOrDefault("Xilantlacay"))
                baseValue.AddFactor(0.20f, new TextObject("Xilantlacay's Speedness"));
            return baseValue;

        }
    }
    internal class ElveanDefaultCharacterDevelopmentModel : DefaultCharacterDevelopmentModel
    {
         
        public override float CalculateLearningRate(Hero hero, SkillObject skill)
        {
            if (skill == null)
                return 0;
            float baseValue = base.CalculateLearningRate(hero, skill);
            if (hero.CharacterObject.Race == TaleWorlds.Core.FaceGen.GetRaceOrDefault("elvean") && skill == DefaultSkills.Athletics)
                return ((15f / 100f) * baseValue) + baseValue;
            return baseValue;
        }
    }

    internal class NasoriaWageModel : DefaultPartyWageModel
    {

        public override int GetTroopRecruitmentCost(CharacterObject troop, Hero buyerHero, bool withoutItemCost = false)
        {
            int baseValue = base.GetTroopRecruitmentCost(troop, buyerHero, withoutItemCost);
            if (buyerHero == null)
                return baseValue;
            int nasoriaBonus = (int)(baseValue - 15f / 100f * baseValue);
            if (buyerHero.Culture.StringId == "vlandia" && troop.Occupation == Occupation.Mercenary && nasoriaBonus > 0)
                return nasoriaBonus;
            return baseValue;
        }
    }
    internal class AthasBuildingConstructionModel : DefaultBuildingConstructionModel
    {
        public override ExplainedNumber CalculateDailyConstructionPower(Town town, bool includeDescriptions = false)
        {
            ExplainedNumber baseNumber = base.CalculateDailyConstructionPower(town, includeDescriptions);
            if (town.Owner.Culture.StringId == "aserai")
                baseNumber.AddFactor(0.20f, new TextObject("{=SADf3gmami3g}Athas Slavery"));
            return baseNumber;
        }
    }
    internal class XilanRaidModel : DefaultRaidModel
    {
        private static PartyBase currentRaidParty;
        [HarmonyPatch(typeof(RaidEventComponent), "Update")]
        public static class RaidUpdatePatch
        {
            public static void Prefix(ref bool finish, RaidEventComponent __instance)
            {
                currentRaidParty = __instance.AttackerSide.LeaderParty;
            }
        }
        public override MBReadOnlyList<(ItemObject, float)> GetCommonLootItemScores()
        {
            MBReadOnlyList<(ItemObject, float)> baseValue = base.GetCommonLootItemScores();
            if (baseValue == null || baseValue.Count < 1 || currentRaidParty.Owner?.Culture.StringId != "giant")
                return baseValue;
            for (int i = 0; i < baseValue.Count; i++)
            {
                (ItemObject, float) tuple = (baseValue[i].Item1, ((25f / 100f) * baseValue[i].Item2) + baseValue[i].Item2);
                baseValue[i] = tuple;
            }

            return baseValue;
        }

        public override float CalculateHitDamage(MapEventSide attackerSide, float settlementHitPoints)
        {
            float baseValue = base.CalculateHitDamage(attackerSide, settlementHitPoints);
            if (attackerSide.LeaderParty.Owner?.Culture.StringId == "giant")
                return ((25f / 100f) * baseValue) + baseValue;
            return baseValue;

        }
    }
    internal class TlachAndElveanMoraleModel : DefaultPartyMoraleModel
    {
        public override ExplainedNumber GetEffectivePartyMorale(MobileParty party, bool includeDescription = false)
        {
            ExplainedNumber baseNumber = base.GetEffectivePartyMorale(party, includeDescription);

            //Tlachiquiy
            if (party.Owner?.CharacterObject.Race == FaceGen.GetRaceOrDefault("tlachiquiy") &&
                baseNumber.ResultNumber < 100)
                baseNumber = new ExplainedNumber(100, true, new TextObject("Tlachiquiy's Boldness"));

            //Elvean
            if (party?.Party?.Culture == null)
                return baseNumber;
            TerrainType faceTerrainType = Campaign.Current.MapSceneWrapper.GetFaceTerrainType(party.CurrentNavigationFace);
            if (party.Party.Culture.StringId == "battania" && faceTerrainType == TerrainType.Forest)
                baseNumber.AddFactor(0.15f, new TextObject("{=SAvbh23had3}Elvean Forest Morale Bonus"));


            return baseNumber;
        }
    }
    internal class UndeadAndAqarunPrisonerRecruitmentCalculationModel : DefaultPrisonerRecruitmentCalculationModel
    {
        public override int CalculateRecruitableNumber(PartyBase party, CharacterObject character)
        {
            int baseValue = base.CalculateRecruitableNumber(party, character);
            if (party.Owner?.Culture.StringId == "aqarun" && character.Occupation == Occupation.Bandit)
                return party.PrisonRoster.GetTroopCount(character);
            return baseValue;
        }
        public override int GetPrisonerRecruitmentMoraleEffect(PartyBase party, CharacterObject character, int num)
        {
            int baseNumber = base.GetPrisonerRecruitmentMoraleEffect(party, character, num);
            if (character.Occupation == Occupation.Bandit && character.Culture.StringId == "sea_raiders" &&
                party.Owner?.CharacterObject.Race == FaceGen.GetRaceOrDefault("undead"))
                return 0;
            if (character.Occupation == Occupation.Bandit && party.Owner?.Culture.StringId == "aqarun")
                return 0;
            return baseNumber;
        }
        public override bool ShouldPartyRecruitPrisoners(PartyBase party)
        {
            bool baseBool = base.ShouldPartyRecruitPrisoners(party);
            if (party.Owner?.Culture.StringId == "aqarun")
                return true;
            return baseBool;

        }
    }
    internal class CulturesCampaignBehavior : CampaignBehaviorBase
    {
        private readonly string sturgiaId = "sturgia";
        private readonly string khuzaitId = "khuzait";

        private List<string> partiesInForests = new();
        public override void RegisterEvents()
        {
            CampaignEvents.MapEventEnded.AddNonSerializedListener(this, SturgianBonus);
            CampaignEvents.DailyTickSettlementEvent.AddNonSerializedListener(this, KhuzaitBonus);

        }
        private void KhuzaitBonus(Settlement settlement)
        {
            if ((settlement.IsTown || settlement.IsCastle) && settlement.Owner.Culture.StringId == khuzaitId && settlement.Party.PrisonRoster.TotalRegulars > 0 && settlement.MilitiaPartyComponent != null)
            {
                foreach (FlattenedTroopRosterElement troopRosterElement in settlement.Party.PrisonRoster.ToFlattenedRoster())
                {
                    if (MBRandom.RandomFloat < 0.15f)
                    {
                        settlement.Party.PrisonRoster.RemoveTroop(troopRosterElement.Troop);
                        settlement.MilitiaPartyComponent.Party.AddElementToMemberRoster(troopRosterElement.Troop, 1);
                    }
                }
            }
        }
        private void SturgianBonus(MapEvent mapEvent)
        {

            if (mapEvent.HasWinner && mapEvent.Winner.LeaderParty.Culture.StringId == sturgiaId && RFEffectsSubModule.undeadRespawnConfig?.Count > 0)
            {



                List<MapEventParty> parties = mapEvent.Winner.Parties;
                foreach (MapEventParty party in parties)
                {
                    //Calculation to take a number between 0.15 and 0.5 based on the level of the party owner
                    float probability = 0.15f + (0.50f - 0.15f) * (party.Party.Owner.Level - 0f) / (63 - 0f);
                    if (MBRandom.RandomFloat > probability)
                        continue;

                    if (party.Party.Owner.Culture.StringId != sturgiaId)
                        continue;

                    int wounded = party.HealthyManCountAtStart - party.Party.NumberOfHealthyMembers;

                    if (wounded <= 0)
                        continue;

                    int recovered = (int)(15f / 100f * wounded);

                    if (recovered > 0)
                    {
                        for (int i = 0; i < recovered; i++)
                        {
                            float random = MBRandom.RandomFloat;
                            string characterId = RFEffectsSubModule.undeadRespawnConfig.RandomElementByWeight(x => x.Value);
                            CharacterObject characterObject = CharacterObject.Find(characterId);


                            party.Party.AddElementToMemberRoster(characterObject, 1);
                        }
                        if (party.Party == PartyBase.MainParty)
                        {
                            var textObject = new TextObject("{=sf4yHsh3JKw}{AMOUNT} undead soldiers rejoined your army");
                            textObject.SetTextVariable("AMOUNT", recovered);
                            MBInformationManager.AddQuickInformation(textObject);
                        }
                    }
                }

            }
        }
        public override void SyncData(IDataStore dataStore)
        {

        }
    }
}
